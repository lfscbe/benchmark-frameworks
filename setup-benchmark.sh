#!/bin/bash

set -e

usage() {
	echo "Usage: $0 <build|destroy> --project <value> --profile <value> --port <value> [--instance-cpu <value> --instance-ram <value> --nginx-cpu <value> --nginx-ram <value>]"
	echo "  --project <value>         (required)"
	echo "  --profile <value>         (required: single-unrestricted, single-restricted, multi-unrestricted, multi-restricted)"
	echo "  --port <value>            (required: in build)"
	echo "  --instance-cpu <value>    (required if profile is restricted)"
	echo "  --instance-ram <value>    (required if profile is restricted)"
	echo "  --nginx-cpu <value>       (required if profile is restricted)"
	echo "  --nginx-ram <value>       (required if profile is restricted)"
	exit 1
}

ACTION="$1"
shift

if [[ "$ACTION" != "build" && "$ACTION" != "destroy" ]]; then
	echo "First argument must be 'build' or 'destroy'"
	usage
fi

# Default unset
PROJECT=""
PROFILE=""
PORT=""
INSTANCE_CPU=""
INSTANCE_RAM=""
NGINX_CPU=""
NGINX_RAM=""

# Parse args
while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
		--project)
			PROJECT="$2"
			shift 2
			;;
		--profile)
			PROFILE="$2"
			shift 2
			;;
		--port)
			PORT="$2"
			shift 2
			;;
		--instance-cpu)
			INSTANCE_CPU="$2"
			shift 2
			;;
		--instance-ram)
			INSTANCE_RAM="$2"
			shift 2
			;;
		--nginx-cpu)
			NGINX_CPU="$2"
			shift 2
			;;
		--nginx-ram)
			NGINX_RAM="$2"
			shift 2
			;;
		*)
			echo "Unknown option: $1"
			usage
			;;
	esac
done


# Validate required args
if [[ "$ACTION" == "build" ]]; then
	if [[ -z "$PROJECT" ]]; then
		echo "--project is required for build"
		usage
	fi
	if [[ -z "$PROFILE" ]]; then
		echo "--profile is required for build"
		usage
	fi
	if [[ -z "$PORT" ]]; then
		echo "--port is required for build"
		usage
	fi
elif [[ "$ACTION" == "destroy" ]]; then
	if [[ -z "$PROJECT" ]]; then
		echo "--project is required for destroy"
		usage
	fi
	if [[ -z "$PROFILE" ]]; then
		echo "--profile is required for destroy"
		usage
	fi
fi


# Only validate restricted resources for build
case "$PROFILE" in
	single-unrestricted|multi-unrestricted)
		# No extra required
		;;
	single-restricted|multi-restricted)
		if [[ "$ACTION" == "build" ]]; then
			if [[ -z "$INSTANCE_CPU" || -z "$INSTANCE_RAM" || -z "$NGINX_CPU" || -z "$NGINX_RAM" ]]; then
				echo "--instance-cpu, --instance-ram, --nginx-cpu, and --nginx-ram are required for restricted profiles in build"
				usage
			fi
		fi
		;;
	*)
		echo "Invalid --profile: $PROFILE"
		usage
		;;
esac

# Generate nginx-autogenerated.conf for multi profiles
if [[ "$ACTION" == "build" && ("$PROFILE" == "multi-restricted" || "$PROFILE" == "multi-unrestricted") ]]; then
	# Determine restricted/unrestricted string for instance names
	if [[ "$PROFILE" == "multi-restricted" ]]; then
		SUFFIX="restricted"
	else
		SUFFIX="unrestricted"
	fi

	# Compose directory
	TARGET_DIR="$(dirname "$0")/builds/$PROJECT"
	mkdir -p "$TARGET_DIR"

	# Generate config content
	cat > "$TARGET_DIR/nginx-autogenerated.conf" <<EOF
worker_processes auto;
worker_rlimit_nofile 500000;

events {
		use epoll;
		worker_connections 4096;
}

http {
	access_log off;
	error_log /dev/null emerg;

	upstream api {
		server app-multi-instance-1-$SUFFIX:$PORT;
		server app-multi-instance-2-$SUFFIX:$PORT;
		keepalive 500;
	}

	server {
		listen $PORT;

		location / {
			proxy_pass http://api;
			proxy_set_header Host \$host;
			proxy_set_header X-Real-IP \$remote_addr;
			proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto \$scheme;
		}
	}
}
EOF
  echo "✅ Generated $TARGET_DIR/nginx-autogenerated.conf"
fi

# Run docker compose up -d for build
if [[ "$ACTION" == "build" ]]; then
	COMPOSE_FILE="$(dirname "$0")/builds/$PROJECT/compose.yaml"
  if [[ -f "$COMPOSE_FILE" ]]; then
    PROFILE_ARG="--profile $PROFILE"
    PORT="$PORT" \
    INSTANCE_CPU="$INSTANCE_CPU" \
    INSTANCE_RAM="$INSTANCE_RAM" \
    NGINX_CPU="$NGINX_CPU" \
    NGINX_RAM="$NGINX_RAM" \
    docker compose -f "$COMPOSE_FILE" $PROFILE_ARG up -d
    echo "✅ Containers setup"
	else
		echo "❌ Compose file not found: $COMPOSE_FILE"
		exit 1
	fi
fi

# Run docker compose down for destroy
if [[ "$ACTION" == "destroy" ]]; then
	COMPOSE_FILE="$(dirname "$0")/builds/$PROJECT/compose.yaml"
	if [[ -f "$COMPOSE_FILE" ]]; then
		PROFILE_ARG="--profile $PROFILE"
		docker compose -f "$COMPOSE_FILE" $PROFILE_ARG down --rmi all
    echo "✅ Containers destroyed"
	else
		echo "❌ Compose file not found: $COMPOSE_FILE"
		exit 1
	fi
fi
